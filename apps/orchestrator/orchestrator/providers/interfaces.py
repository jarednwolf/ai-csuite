from __future__ import annotations

from typing import Protocol, Sequence, Mapping, Any, runtime_checkable, Optional


class RetryableError(Exception):
    pass


class NonRetryableError(Exception):
    pass


@runtime_checkable
class AdsProvider(Protocol):
    def create_campaign(self, plan: Mapping[str, Any]) -> Mapping[str, Any]: ...
    def report(self, query: Mapping[str, Any]) -> Sequence[Mapping[str, Any]]: ...
    def pause(self, campaign_id: str) -> None: ...


@runtime_checkable
class LifecycleProvider(Protocol):
    def send(self, message: Mapping[str, Any]) -> Mapping[str, Any]: ...
    def schedule(self, batch: Sequence[Mapping[str, Any]], policy: Mapping[str, Any]) -> Mapping[str, Any]: ...


@runtime_checkable
class ExperimentsProvider(Protocol):  # stub for Phase 32 ramps (full in Phase 35)
    def set_flag(self, key: str, value: Any) -> None: ...
    def get_flag(self, key: str, default: Any = None) -> Any: ...
    def ramp(self, key: str, stage: int) -> Mapping[str, Any]: ...


@runtime_checkable
class CDPProvider(Protocol):
    def upsert_profile(self, profile: Mapping[str, Any]) -> None: ...
    def ingest_event(self, event: Mapping[str, Any]) -> None: ...
    def sync_audience(self, audience: Mapping[str, Any]) -> Mapping[str, Any]: ...
    def get_profile(self, user_id: str) -> Optional[Mapping[str, Any]]: ...


@runtime_checkable
class VectorStore(Protocol):
    def index(self, docs: Sequence[Mapping[str, Any]]) -> Mapping[str, Any]: ...
    def search(self, query: str, k: int = 5) -> Sequence[Mapping[str, Any]]: ...
    def swap(self, target: str) -> Mapping[str, Any]: ...


@runtime_checkable
class LLMGateway(Protocol):
    def route(self, prompt: str, tags: Sequence[str]) -> Mapping[str, Any]: ...
    def models(self) -> Sequence[Mapping[str, Any]]: ...


@runtime_checkable
class LLMObservabilityProvider(Protocol):
    def trace_start(self, run_id: str, meta: Mapping[str, Any]) -> str: ...
    def trace_stop(self, trace_id: str, meta: Mapping[str, Any]) -> None: ...
    def log_eval(self, name: str, score: float, meta: Mapping[str, Any]) -> None: ...


